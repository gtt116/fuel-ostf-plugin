--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: alembic_version; Type: TABLE; Schema: public; Owner: ostf; Tablespace: 
--

CREATE TABLE alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE public.alembic_version OWNER TO ostf;

--
-- Name: test_runs; Type: TABLE; Schema: public; Owner: ostf; Tablespace: 
--

CREATE TABLE test_runs (
    id integer NOT NULL,
    type character varying(128),
    data text,
    external_id character varying(128),
    stats text,
    status character varying(128),
    started_at timestamp without time zone,
    ended_at timestamp without time zone
);


ALTER TABLE public.test_runs OWNER TO ostf;

--
-- Name: test_runs_id_seq; Type: SEQUENCE; Schema: public; Owner: ostf
--

CREATE SEQUENCE test_runs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.test_runs_id_seq OWNER TO ostf;

--
-- Name: test_runs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ostf
--

ALTER SEQUENCE test_runs_id_seq OWNED BY test_runs.id;


--
-- Name: test_runs_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ostf
--

SELECT pg_catalog.setval('test_runs_id_seq', 10, true);


--
-- Name: test_sets; Type: TABLE; Schema: public; Owner: ostf; Tablespace: 
--

CREATE TABLE test_sets (
    id character varying(128) NOT NULL,
    description character varying(128),
    data text
);


ALTER TABLE public.test_sets OWNER TO ostf;

--
-- Name: tests; Type: TABLE; Schema: public; Owner: ostf; Tablespace: 
--

CREATE TABLE tests (
    id integer NOT NULL,
    name character varying(512),
    status character varying(128),
    taken double precision,
    data text,
    test_run_id integer,
    test_set_id character varying(128)
);


ALTER TABLE public.tests OWNER TO ostf;

--
-- Name: tests_id_seq; Type: SEQUENCE; Schema: public; Owner: ostf
--

CREATE SEQUENCE tests_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.tests_id_seq OWNER TO ostf;

--
-- Name: tests_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ostf
--

ALTER SEQUENCE tests_id_seq OWNED BY tests.id;


--
-- Name: tests_id_seq; Type: SEQUENCE SET; Schema: public; Owner: ostf
--

SELECT pg_catalog.setval('tests_id_seq', 154, true);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: ostf
--

ALTER TABLE ONLY test_runs ALTER COLUMN id SET DEFAULT nextval('test_runs_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: ostf
--

ALTER TABLE ONLY tests ALTER COLUMN id SET DEFAULT nextval('tests_id_seq'::regclass);


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: ostf
--

COPY alembic_version (version_num) FROM stdin;
4e9905279776
\.


--
-- Data for Name: test_runs; Type: TABLE DATA; Schema: public; Owner: ostf
--

COPY test_runs (id, type, data, external_id, stats, status, started_at, ended_at) FROM stdin;
1	fuel_smoke	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 05:33:22.0317	2013-08-16 05:33:42.365098
2	fuel_sanity	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 05:33:22.507584	2013-08-16 05:33:47.853912
3	fuel_smoke	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 05:34:58.802977	2013-08-16 05:35:10.410041
4	fuel_smoke	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 07:18:57.508193	2013-08-16 07:19:09.287067
5	fuel_smoke	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 07:43:13.261715	2013-08-16 07:43:31.038268
6	fuel_sanity	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 07:43:13.640594	2013-08-16 07:43:48.300914
7	fuel_smoke	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 07:45:40.455431	2013-08-16 07:45:56.688386
8	fuel_sanity	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 07:45:41.118804	2013-08-16 07:46:00.711207
9	fuel_smoke	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 11:45:18.589722	2013-08-16 11:45:35.228077
10	fuel_sanity	{"cluster_id": 1, "config": {}}	1	\N	finished	2013-08-16 11:45:19.183912	2013-08-16 11:45:44.269318
\.


--
-- Data for Name: test_sets; Type: TABLE DATA; Schema: public; Owner: ostf
--

COPY test_sets (id, description, data) FROM stdin;
fuel_smoke	Smoke tests. Duration 3 min - 14 min	{"cleanup": "fuel_health.cleanup", "driver": "nose", "argv": [], "test_path": "fuel_health.tests.smoke"}
fuel_sanity	Sanity tests. Duration 30sec - 2 min	{"driver": "nose", "argv": [], "test_path": "fuel_health.tests.sanity"}
\.


--
-- Data for Name: tests; Type: TABLE DATA; Schema: public; Owner: ostf
--

COPY tests (id, name, status, taken, data, test_run_id, test_set_id) FROM stdin;
23	fuel_health.tests.smoke.test_create_flavor.FlavorsAdminTest.test_create_flavor	\N	\N	{"name": "Create instance flavor", "traceback": null, "step": null, "duration": "1-30 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create small-size flavor.\\n            2. Check that created flavor has the expected name.\\n            3. Check that the flavor disk has the expected size.\\n        "}	\N	fuel_smoke
24	fuel_health.tests.smoke.test_create_volume.VolumesTest.test_volume_create	\N	\N	{"name": "Create instance volume", "traceback": null, "step": null, "duration": "48-200 s.", "message": null, "description": "        Target component: Compute\\n\\n        Scenario:\\n            1. Create a new small-size volume.\\n            2. Wait for volume status to become \\"available\\".\\n            3. Check volume has correct name.\\n            4. Create new instance.\\n            5. Wait for \\"Active\\" status\\n            6. Attach volume to an instance.\\n            7. Check volume status is \\"in use\\".\\n            8. Get information on the created volume by its id.\\n            9. Detach volume from the instance.\\n            10. Check volume has \\"available\\" status.\\n            11. Delete volume.\\n        "}	\N	fuel_smoke
25	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_001_create_keypairs	\N	\N	{"name": "Keypair creation", "traceback": null, "step": null, "duration": "10-25 s.", "message": null, "description": "        Target component: Nova.\\n\\n        Scenario:\\n            1. Create a new keypair, check if it was created successfully.\\n        "}	\N	fuel_smoke
26	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_002_create_security_groups	\N	\N	{"name": "Security group creation", "traceback": null, "step": null, "duration": "2-25 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a security group, check if it was created correctly.\\n        "}	\N	fuel_smoke
27	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_004_check_networks	\N	\N	{"name": "Check network parameters", "traceback": null, "step": null, "duration": "1-50 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Get the list of networks.\\n            2. Confirm that networks have expected labels.\\n            3. Confirm that networks have expected ids.\\n        "}	\N	fuel_smoke
28	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_005_create_servers	\N	\N	{"name": "Launch instance", "traceback": null, "step": null, "duration": "50-200 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n        "}	\N	fuel_smoke
29	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_006_assign_floating_ips	\N	\N	{"name": "Assign floating IP", "traceback": null, "step": null, "duration": "40-200 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if doesn`t exist yet).\\n            2. Create instance using the new security group.\\n            3. Create a new floating IP.\\n            4. Assign the new floating IP to the instance.\\n        "}	\N	fuel_smoke
30	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_007_check_public_network_connectivity	\N	\N	{"name": "Check that VM is accessible via floating IP address", "traceback": null, "step": null, "duration": "40-200 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group\\n\\t\\t\\t(if it doesn`t exist yet).\\n            3. Create a new floating IP (if doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check connectivity to the floating IP using ping command.\\n        "}	\N	fuel_smoke
31	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_008_check_public_instance_connectivity_from_instance	\N	\N	{"name": "Check network connectivity from instance via floating IP", "traceback": null, "step": null, "duration": "40-200 s.", "message": null, "description": "\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n            (if it doesn`t exist yet).\\n            3. Create a new floating IP (if it doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check that public IP address 8.8.8.8 can be pinged from instance.\\n        "}	\N	fuel_smoke
32	fuel_health.tests.smoke.test_nova_image_actions.TestImageAction.test_snapshot	\N	\N	{"name": "Launch instance, create snapshot, launch instance from snapshot", "traceback": null, "step": null, "duration": "80-180 s.", "message": null, "description": "        Target component: Glance\\n\\n        Scenario:\\n            1. Launch an instance using the default image.\\n            2. Make snapshot of the created instance.\\n            3. Delete the instance created in step 1.\\n            4. Launch another instance from the snapshot created in step 2.\\n        "}	\N	fuel_smoke
33	fuel_health.tests.smoke.test_user_create.TestUserTenantRole.test_create_user	\N	\N	{"name": "User creation and authentication in Horizon", "traceback": null, "step": null, "duration": "1-50 s.", "message": null, "description": "        Target components: Nova, Keystone\\n\\n        Scenario:\\n            1. Create a new tenant.\\n            2. Check that tenant was created successfully.\\n            3. Create a new user.\\n            4. Check that user was created successfully.\\n            5. Create a new user role.\\n            6. Check that user role was created successfully.\\n            7. Perform token authentication.\\n            8. Check that authentication was successful.\\n            9. Send authentication request to Horizon.\\n            10. Confirm that response status is 200.\\n        "}	\N	fuel_smoke
34	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_flavors	\N	\N	{"name": "Flavor list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of flavors is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of flavors.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
35	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_images	\N	\N	{"name": "Images list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of images is available.\\n        Target component: Glance\\n        Scenario:\\n            1. Request the list of images.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
36	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_instances	\N	\N	{"name": "Instance list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of instances is available.\\n        Target component: Nova\\n        Scenario:\\n            1. Request the list of instances.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
37	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_rate_limits	\N	\N	{"name": "Limits list availability", "traceback": null, "step": null, "duration": "2-20 s.", "message": null, "description": "        Test checks that the list of absolute limits is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of limits.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
38	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_snapshots	\N	\N	{"name": "Snapshots list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of snapshots is available.\\n        Target component: Glance\\n\\n        Scenario:\\n            1. Request the list of snapshots.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
39	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_volumes	\N	\N	{"name": "Volume list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of volumes is available.\\n        Target component: Cinder\\n\\n        Scenario:\\n            1. Request the list of volumes.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
40	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_services	\N	\N	{"name": "Services list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that active services can be listed.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of services.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
41	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_users	\N	\N	{"name": "User list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that existing users can be listed.\\n        Target component: Keystone\\n\\n        Scenario:\\n            1. Request the list of users.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
42	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_dns_state	\N	\N	{"name": "DNS availability", "traceback": null, "step": null, "duration": "1-100 s.", "message": null, "description": "        Test DNS resolution on compute nodes.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a compute node via SSH.\\n            2. Execute ping 8.8.8.8 from the compute.\\n            3. Check all the packets were received.\\n            4. Execute host 8.8.8.8 from the controller.\\n            5. Check 8.8.8.8 host is resolved.\\n        "}	\N	fuel_sanity
43	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_services_state	\N	\N	{"name": "Service status monitoring", "traceback": null, "step": null, "duration": "2-50 s.", "message": null, "description": "        Confirm that all required services are running.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a controller node via SSH.\\n            2. Execute nova-manage service list command.\\n            3. Confirm that there are no failed services (with state 'XXX')\\n        "}	\N	fuel_sanity
44	fuel_health.tests.sanity.test_sanity_networking.NetworksTest.test_list_networks	\N	\N	{"name": "Networks availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that available networks can be listed.\\n        Target component: Nova Networking.\\n\\n        Scenario:\\n            1. Request the list of networks.\\n            2. Confirm that a response is received.\\n        "}	\N	fuel_sanity
47	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_001_create_keypairs	failure	0.037619829177856445	{"name": "Keypair creation", "traceback": null, "step": "", "duration": "10-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova.\\n\\n        Scenario:\\n            1. Create a new keypair, check if it was created successfully.\\n        "}	1	\N
48	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_002_create_security_groups	failure	0.030353069305419922	{"name": "Security group creation", "traceback": null, "step": "", "duration": "2-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a security group, check if it was created correctly.\\n        "}	1	\N
49	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_004_check_networks	failure	0.038969039916992188	{"name": "Check network parameters", "traceback": null, "step": "", "duration": "1-50 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Get the list of networks.\\n            2. Confirm that networks have expected labels.\\n            3. Confirm that networks have expected ids.\\n        "}	1	\N
50	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_005_create_servers	failure	0.037271022796630859	{"name": "Launch instance", "traceback": null, "step": "", "duration": "50-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n        "}	1	\N
58	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_instances	success	0.54664397239685059	{"name": "Instance list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of instances is available.\\n        Target component: Nova\\n        Scenario:\\n            1. Request the list of instances.\\n            2. Confirm that a response is received.\\n        "}	2	\N
59	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_rate_limits	success	0.18689203262329102	{"name": "Limits list availability", "traceback": null, "step": null, "duration": "2-20 s.", "message": null, "description": "        Test checks that the list of absolute limits is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of limits.\\n            2. Confirm that a response is received.\\n        "}	2	\N
60	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_snapshots	success	5.1192460060119629	{"name": "Snapshots list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of snapshots is available.\\n        Target component: Glance\\n\\n        Scenario:\\n            1. Request the list of snapshots.\\n            2. Confirm that a response is received.\\n        "}	2	\N
51	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_006_assign_floating_ips	failure	0.035830974578857422	{"name": "Assign floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if doesn`t exist yet).\\n            2. Create instance using the new security group.\\n            3. Create a new floating IP.\\n            4. Assign the new floating IP to the instance.\\n        "}	1	\N
52	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_007_check_public_network_connectivity	failure	0.049754142761230469	{"name": "Check that VM is accessible via floating IP address", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group\\n\\t\\t\\t(if it doesn`t exist yet).\\n            3. Create a new floating IP (if doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check connectivity to the floating IP using ping command.\\n        "}	1	\N
53	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_008_check_public_instance_connectivity_from_instance	failure	0.038485050201416016	{"name": "Check network connectivity from instance via floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n            (if it doesn`t exist yet).\\n            3. Create a new floating IP (if it doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check that public IP address 8.8.8.8 can be pinged from instance.\\n        "}	1	\N
61	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_volumes	success	0.2727820873260498	{"name": "Volume list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of volumes is available.\\n        Target component: Cinder\\n\\n        Scenario:\\n            1. Request the list of volumes.\\n            2. Confirm that a response is received.\\n        "}	2	\N
54	fuel_health.tests.smoke.test_nova_image_actions.TestImageAction.test_snapshot	failure	0.038390874862670898	{"name": "Launch instance, create snapshot, launch instance from snapshot", "traceback": null, "step": "", "duration": "80-180 s.", "message": "There are no compute nodes", "description": "        Target component: Glance\\n\\n        Scenario:\\n            1. Launch an instance using the default image.\\n            2. Make snapshot of the created instance.\\n            3. Delete the instance created in step 1.\\n            4. Launch another instance from the snapshot created in step 2.\\n        "}	1	\N
62	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_services	success	0.88944697380065918	{"name": "Services list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that active services can be listed.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of services.\\n            2. Confirm that a response is received.\\n        "}	2	\N
63	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_users	success	0.29501509666442871	{"name": "User list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that existing users can be listed.\\n        Target component: Keystone\\n\\n        Scenario:\\n            1. Request the list of users.\\n            2. Confirm that a response is received.\\n        "}	2	\N
64	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_dns_state	failure	0.062022924423217773	{"name": "DNS availability", "traceback": null, "step": 1, "duration": "1-100 s.", "message": "There are no compute nodes.", "description": "        Test DNS resolution on compute nodes.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a compute node via SSH.\\n            2. Execute ping 8.8.8.8 from the compute.\\n            3. Check all the packets were received.\\n            4. Execute host 8.8.8.8 from the controller.\\n            5. Check 8.8.8.8 host is resolved.\\n        "}	2	\N
56	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_flavors	success	2.3195810317993164	{"name": "Flavor list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of flavors is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of flavors.\\n            2. Confirm that a response is received.\\n        "}	2	\N
45	fuel_health.tests.smoke.test_create_flavor.FlavorsAdminTest.test_create_flavor	success	0.33121395111083984	{"name": "Create instance flavor", "traceback": null, "step": null, "duration": "1-30 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create small-size flavor.\\n            2. Check that created flavor has the expected name.\\n            3. Check that the flavor disk has the expected size.\\n        "}	1	\N
57	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_images	success	0.91653585433959961	{"name": "Images list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of images is available.\\n        Target component: Glance\\n        Scenario:\\n            1. Request the list of images.\\n            2. Confirm that a response is received.\\n        "}	2	\N
46	fuel_health.tests.smoke.test_create_volume.VolumesTest.test_volume_create	failure	0.041269063949584961	{"name": "Create instance volume", "traceback": null, "step": "", "duration": "48-200 s.", "message": "There are no cinder nodes", "description": "        Target component: Compute\\n\\n        Scenario:\\n            1. Create a new small-size volume.\\n            2. Wait for volume status to become \\"available\\".\\n            3. Check volume has correct name.\\n            4. Create new instance.\\n            5. Wait for \\"Active\\" status\\n            6. Attach volume to an instance.\\n            7. Check volume status is \\"in use\\".\\n            8. Get information on the created volume by its id.\\n            9. Detach volume from the instance.\\n            10. Check volume has \\"available\\" status.\\n            11. Delete volume.\\n        "}	1	\N
68	fuel_health.tests.smoke.test_create_volume.VolumesTest.test_volume_create	failure	0.041025161743164062	{"name": "Create instance volume", "traceback": null, "step": "", "duration": "48-200 s.", "message": "There are no cinder nodes", "description": "        Target component: Compute\\n\\n        Scenario:\\n            1. Create a new small-size volume.\\n            2. Wait for volume status to become \\"available\\".\\n            3. Check volume has correct name.\\n            4. Create new instance.\\n            5. Wait for \\"Active\\" status\\n            6. Attach volume to an instance.\\n            7. Check volume status is \\"in use\\".\\n            8. Get information on the created volume by its id.\\n            9. Detach volume from the instance.\\n            10. Check volume has \\"available\\" status.\\n            11. Delete volume.\\n        "}	3	\N
55	fuel_health.tests.smoke.test_user_create.TestUserTenantRole.test_create_user	success	1.4335989952087402	{"name": "User creation and authentication in Horizon", "traceback": null, "step": null, "duration": "1-50 s.", "message": null, "description": "        Target components: Nova, Keystone\\n\\n        Scenario:\\n            1. Create a new tenant.\\n            2. Check that tenant was created successfully.\\n            3. Create a new user.\\n            4. Check that user was created successfully.\\n            5. Create a new user role.\\n            6. Check that user role was created successfully.\\n            7. Perform token authentication.\\n            8. Check that authentication was successful.\\n            9. Send authentication request to Horizon.\\n            10. Confirm that response status is 200.\\n        "}	1	\N
65	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_services_state	success	8.0943880081176758	{"name": "Service status monitoring", "traceback": null, "step": null, "duration": "2-50 s.", "message": null, "description": "        Confirm that all required services are running.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a controller node via SSH.\\n            2. Execute nova-manage service list command.\\n            3. Confirm that there are no failed services (with state 'XXX')\\n        "}	2	\N
67	fuel_health.tests.smoke.test_create_flavor.FlavorsAdminTest.test_create_flavor	success	0.18467521667480469	{"name": "Create instance flavor", "traceback": null, "step": null, "duration": "1-30 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create small-size flavor.\\n            2. Check that created flavor has the expected name.\\n            3. Check that the flavor disk has the expected size.\\n        "}	3	\N
66	fuel_health.tests.sanity.test_sanity_networking.NetworksTest.test_list_networks	success	0.42960500717163086	{"name": "Networks availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that available networks can be listed.\\n        Target component: Nova Networking.\\n\\n        Scenario:\\n            1. Request the list of networks.\\n            2. Confirm that a response is received.\\n        "}	2	\N
69	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_001_create_keypairs	failure	0.040181159973144531	{"name": "Keypair creation", "traceback": null, "step": "", "duration": "10-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova.\\n\\n        Scenario:\\n            1. Create a new keypair, check if it was created successfully.\\n        "}	3	\N
72	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_005_create_servers	failure	0.054094076156616211	{"name": "Launch instance", "traceback": null, "step": "", "duration": "50-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n        "}	3	\N
70	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_002_create_security_groups	failure	0.045697212219238281	{"name": "Security group creation", "traceback": null, "step": "", "duration": "2-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a security group, check if it was created correctly.\\n        "}	3	\N
74	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_007_check_public_network_connectivity	failure	0.033761024475097656	{"name": "Check that VM is accessible via floating IP address", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group\\n\\t\\t\\t(if it doesn`t exist yet).\\n            3. Create a new floating IP (if doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check connectivity to the floating IP using ping command.\\n        "}	3	\N
71	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_004_check_networks	failure	0.033928871154785156	{"name": "Check network parameters", "traceback": null, "step": "", "duration": "1-50 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Get the list of networks.\\n            2. Confirm that networks have expected labels.\\n            3. Confirm that networks have expected ids.\\n        "}	3	\N
77	fuel_health.tests.smoke.test_user_create.TestUserTenantRole.test_create_user	success	0.67433619499206543	{"name": "User creation and authentication in Horizon", "traceback": null, "step": null, "duration": "1-50 s.", "message": null, "description": "        Target components: Nova, Keystone\\n\\n        Scenario:\\n            1. Create a new tenant.\\n            2. Check that tenant was created successfully.\\n            3. Create a new user.\\n            4. Check that user was created successfully.\\n            5. Create a new user role.\\n            6. Check that user role was created successfully.\\n            7. Perform token authentication.\\n            8. Check that authentication was successful.\\n            9. Send authentication request to Horizon.\\n            10. Confirm that response status is 200.\\n        "}	3	\N
73	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_006_assign_floating_ips	failure	0.038094997406005859	{"name": "Assign floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if doesn`t exist yet).\\n            2. Create instance using the new security group.\\n            3. Create a new floating IP.\\n            4. Assign the new floating IP to the instance.\\n        "}	3	\N
76	fuel_health.tests.smoke.test_nova_image_actions.TestImageAction.test_snapshot	failure	0.031593084335327148	{"name": "Launch instance, create snapshot, launch instance from snapshot", "traceback": null, "step": "", "duration": "80-180 s.", "message": "There are no compute nodes", "description": "        Target component: Glance\\n\\n        Scenario:\\n            1. Launch an instance using the default image.\\n            2. Make snapshot of the created instance.\\n            3. Delete the instance created in step 1.\\n            4. Launch another instance from the snapshot created in step 2.\\n        "}	3	\N
75	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_008_check_public_instance_connectivity_from_instance	failure	0.07231593132019043	{"name": "Check network connectivity from instance via floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n            (if it doesn`t exist yet).\\n            3. Create a new floating IP (if it doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check that public IP address 8.8.8.8 can be pinged from instance.\\n        "}	3	\N
78	fuel_health.tests.smoke.test_create_flavor.FlavorsAdminTest.test_create_flavor	success	0.20651793479919434	{"name": "Create instance flavor", "traceback": null, "step": null, "duration": "1-30 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create small-size flavor.\\n            2. Check that created flavor has the expected name.\\n            3. Check that the flavor disk has the expected size.\\n        "}	4	\N
79	fuel_health.tests.smoke.test_create_volume.VolumesTest.test_volume_create	failure	0.037251949310302734	{"name": "Create instance volume", "traceback": null, "step": "", "duration": "48-200 s.", "message": "There are no cinder nodes", "description": "        Target component: Compute\\n\\n        Scenario:\\n            1. Create a new small-size volume.\\n            2. Wait for volume status to become \\"available\\".\\n            3. Check volume has correct name.\\n            4. Create new instance.\\n            5. Wait for \\"Active\\" status\\n            6. Attach volume to an instance.\\n            7. Check volume status is \\"in use\\".\\n            8. Get information on the created volume by its id.\\n            9. Detach volume from the instance.\\n            10. Check volume has \\"available\\" status.\\n            11. Delete volume.\\n        "}	4	\N
80	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_001_create_keypairs	failure	0.039899110794067383	{"name": "Keypair creation", "traceback": null, "step": "", "duration": "10-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova.\\n\\n        Scenario:\\n            1. Create a new keypair, check if it was created successfully.\\n        "}	4	\N
83	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_005_create_servers	failure	0.044979095458984375	{"name": "Launch instance", "traceback": null, "step": "", "duration": "50-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n        "}	4	\N
81	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_002_create_security_groups	failure	0.039129018783569336	{"name": "Security group creation", "traceback": null, "step": "", "duration": "2-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a security group, check if it was created correctly.\\n        "}	4	\N
85	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_007_check_public_network_connectivity	failure	0.042689085006713867	{"name": "Check that VM is accessible via floating IP address", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group\\n\\t\\t\\t(if it doesn`t exist yet).\\n            3. Create a new floating IP (if doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check connectivity to the floating IP using ping command.\\n        "}	4	\N
82	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_004_check_networks	failure	0.054610967636108398	{"name": "Check network parameters", "traceback": null, "step": "", "duration": "1-50 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Get the list of networks.\\n            2. Confirm that networks have expected labels.\\n            3. Confirm that networks have expected ids.\\n        "}	4	\N
88	fuel_health.tests.smoke.test_user_create.TestUserTenantRole.test_create_user	success	0.68370914459228516	{"name": "User creation and authentication in Horizon", "traceback": null, "step": null, "duration": "1-50 s.", "message": null, "description": "        Target components: Nova, Keystone\\n\\n        Scenario:\\n            1. Create a new tenant.\\n            2. Check that tenant was created successfully.\\n            3. Create a new user.\\n            4. Check that user was created successfully.\\n            5. Create a new user role.\\n            6. Check that user role was created successfully.\\n            7. Perform token authentication.\\n            8. Check that authentication was successful.\\n            9. Send authentication request to Horizon.\\n            10. Confirm that response status is 200.\\n        "}	4	\N
84	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_006_assign_floating_ips	failure	0.052474021911621094	{"name": "Assign floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if doesn`t exist yet).\\n            2. Create instance using the new security group.\\n            3. Create a new floating IP.\\n            4. Assign the new floating IP to the instance.\\n        "}	4	\N
86	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_008_check_public_instance_connectivity_from_instance	failure	0.065581798553466797	{"name": "Check network connectivity from instance via floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n            (if it doesn`t exist yet).\\n            3. Create a new floating IP (if it doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check that public IP address 8.8.8.8 can be pinged from instance.\\n        "}	4	\N
87	fuel_health.tests.smoke.test_nova_image_actions.TestImageAction.test_snapshot	failure	0.043110847473144531	{"name": "Launch instance, create snapshot, launch instance from snapshot", "traceback": null, "step": "", "duration": "80-180 s.", "message": "There are no compute nodes", "description": "        Target component: Glance\\n\\n        Scenario:\\n            1. Launch an instance using the default image.\\n            2. Make snapshot of the created instance.\\n            3. Delete the instance created in step 1.\\n            4. Launch another instance from the snapshot created in step 2.\\n        "}	4	\N
89	fuel_health.tests.smoke.test_create_flavor.FlavorsAdminTest.test_create_flavor	success	0.27228522300720215	{"name": "Create instance flavor", "traceback": null, "step": null, "duration": "1-30 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create small-size flavor.\\n            2. Check that created flavor has the expected name.\\n            3. Check that the flavor disk has the expected size.\\n        "}	5	\N
90	fuel_health.tests.smoke.test_create_volume.VolumesTest.test_volume_create	failure	0.088959932327270508	{"name": "Create instance volume", "traceback": null, "step": "", "duration": "48-200 s.", "message": "There are no cinder nodes", "description": "        Target component: Compute\\n\\n        Scenario:\\n            1. Create a new small-size volume.\\n            2. Wait for volume status to become \\"available\\".\\n            3. Check volume has correct name.\\n            4. Create new instance.\\n            5. Wait for \\"Active\\" status\\n            6. Attach volume to an instance.\\n            7. Check volume status is \\"in use\\".\\n            8. Get information on the created volume by its id.\\n            9. Detach volume from the instance.\\n            10. Check volume has \\"available\\" status.\\n            11. Delete volume.\\n        "}	5	\N
91	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_001_create_keypairs	failure	0.088284015655517578	{"name": "Keypair creation", "traceback": null, "step": "", "duration": "10-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova.\\n\\n        Scenario:\\n            1. Create a new keypair, check if it was created successfully.\\n        "}	5	\N
101	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_images	success	1.0796389579772949	{"name": "Images list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of images is available.\\n        Target component: Glance\\n        Scenario:\\n            1. Request the list of images.\\n            2. Confirm that a response is received.\\n        "}	6	\N
102	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_instances	success	0.29293203353881836	{"name": "Instance list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of instances is available.\\n        Target component: Nova\\n        Scenario:\\n            1. Request the list of instances.\\n            2. Confirm that a response is received.\\n        "}	6	\N
103	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_rate_limits	success	0.17328619956970215	{"name": "Limits list availability", "traceback": null, "step": null, "duration": "2-20 s.", "message": null, "description": "        Test checks that the list of absolute limits is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of limits.\\n            2. Confirm that a response is received.\\n        "}	6	\N
104	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_snapshots	success	1.099635124206543	{"name": "Snapshots list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of snapshots is available.\\n        Target component: Glance\\n\\n        Scenario:\\n            1. Request the list of snapshots.\\n            2. Confirm that a response is received.\\n        "}	6	\N
105	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_volumes	success	0.16453099250793457	{"name": "Volume list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of volumes is available.\\n        Target component: Cinder\\n\\n        Scenario:\\n            1. Request the list of volumes.\\n            2. Confirm that a response is received.\\n        "}	6	\N
92	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_002_create_security_groups	failure	0.14204502105712891	{"name": "Security group creation", "traceback": null, "step": "", "duration": "2-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a security group, check if it was created correctly.\\n        "}	5	\N
93	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_004_check_networks	failure	0.2231900691986084	{"name": "Check network parameters", "traceback": null, "step": "", "duration": "1-50 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Get the list of networks.\\n            2. Confirm that networks have expected labels.\\n            3. Confirm that networks have expected ids.\\n        "}	5	\N
94	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_005_create_servers	failure	0.15049290657043457	{"name": "Launch instance", "traceback": null, "step": "", "duration": "50-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n        "}	5	\N
96	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_007_check_public_network_connectivity	failure	0.096765041351318359	{"name": "Check that VM is accessible via floating IP address", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group\\n\\t\\t\\t(if it doesn`t exist yet).\\n            3. Create a new floating IP (if doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check connectivity to the floating IP using ping command.\\n        "}	5	\N
97	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_008_check_public_instance_connectivity_from_instance	failure	0.1247398853302002	{"name": "Check network connectivity from instance via floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n            (if it doesn`t exist yet).\\n            3. Create a new floating IP (if it doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check that public IP address 8.8.8.8 can be pinged from instance.\\n        "}	5	\N
98	fuel_health.tests.smoke.test_nova_image_actions.TestImageAction.test_snapshot	failure	0.1007080078125	{"name": "Launch instance, create snapshot, launch instance from snapshot", "traceback": null, "step": "", "duration": "80-180 s.", "message": "There are no compute nodes", "description": "        Target component: Glance\\n\\n        Scenario:\\n            1. Launch an instance using the default image.\\n            2. Make snapshot of the created instance.\\n            3. Delete the instance created in step 1.\\n            4. Launch another instance from the snapshot created in step 2.\\n        "}	5	\N
99	fuel_health.tests.smoke.test_user_create.TestUserTenantRole.test_create_user	success	1.3339970111846924	{"name": "User creation and authentication in Horizon", "traceback": null, "step": null, "duration": "1-50 s.", "message": null, "description": "        Target components: Nova, Keystone\\n\\n        Scenario:\\n            1. Create a new tenant.\\n            2. Check that tenant was created successfully.\\n            3. Create a new user.\\n            4. Check that user was created successfully.\\n            5. Create a new user role.\\n            6. Check that user role was created successfully.\\n            7. Perform token authentication.\\n            8. Check that authentication was successful.\\n            9. Send authentication request to Horizon.\\n            10. Confirm that response status is 200.\\n        "}	5	\N
100	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_flavors	success	0.86719679832458496	{"name": "Flavor list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of flavors is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of flavors.\\n            2. Confirm that a response is received.\\n        "}	6	\N
106	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_services	success	1.0392019748687744	{"name": "Services list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that active services can be listed.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of services.\\n            2. Confirm that a response is received.\\n        "}	6	\N
95	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_006_assign_floating_ips	failure	0.081036090850830078	{"name": "Assign floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if doesn`t exist yet).\\n            2. Create instance using the new security group.\\n            3. Create a new floating IP.\\n            4. Assign the new floating IP to the instance.\\n        "}	5	\N
107	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_users	success	0.202117919921875	{"name": "User list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that existing users can be listed.\\n        Target component: Keystone\\n\\n        Scenario:\\n            1. Request the list of users.\\n            2. Confirm that a response is received.\\n        "}	6	\N
109	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_services_state	success	21.249326944351196	{"name": "Service status monitoring", "traceback": null, "step": null, "duration": "2-50 s.", "message": null, "description": "        Confirm that all required services are running.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a controller node via SSH.\\n            2. Execute nova-manage service list command.\\n            3. Confirm that there are no failed services (with state 'XXX')\\n        "}	6	\N
108	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_dns_state	failure	0.13630199432373047	{"name": "DNS availability", "traceback": null, "step": 1, "duration": "1-100 s.", "message": "There are no compute nodes.", "description": "        Test DNS resolution on compute nodes.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a compute node via SSH.\\n            2. Execute ping 8.8.8.8 from the compute.\\n            3. Check all the packets were received.\\n            4. Execute host 8.8.8.8 from the controller.\\n            5. Check 8.8.8.8 host is resolved.\\n        "}	6	\N
112	fuel_health.tests.smoke.test_create_volume.VolumesTest.test_volume_create	failure	0.10928606986999512	{"name": "Create instance volume", "traceback": null, "step": "", "duration": "48-200 s.", "message": "There are no cinder nodes", "description": "        Target component: Compute\\n\\n        Scenario:\\n            1. Create a new small-size volume.\\n            2. Wait for volume status to become \\"available\\".\\n            3. Check volume has correct name.\\n            4. Create new instance.\\n            5. Wait for \\"Active\\" status\\n            6. Attach volume to an instance.\\n            7. Check volume status is \\"in use\\".\\n            8. Get information on the created volume by its id.\\n            9. Detach volume from the instance.\\n            10. Check volume has \\"available\\" status.\\n            11. Delete volume.\\n        "}	7	\N
111	fuel_health.tests.smoke.test_create_flavor.FlavorsAdminTest.test_create_flavor	success	0.5246889591217041	{"name": "Create instance flavor", "traceback": null, "step": null, "duration": "1-30 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create small-size flavor.\\n            2. Check that created flavor has the expected name.\\n            3. Check that the flavor disk has the expected size.\\n        "}	7	\N
110	fuel_health.tests.sanity.test_sanity_networking.NetworksTest.test_list_networks	success	0.44617486000061035	{"name": "Networks availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that available networks can be listed.\\n        Target component: Nova Networking.\\n\\n        Scenario:\\n            1. Request the list of networks.\\n            2. Confirm that a response is received.\\n        "}	6	\N
113	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_001_create_keypairs	failure	0.068188905715942383	{"name": "Keypair creation", "traceback": null, "step": "", "duration": "10-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova.\\n\\n        Scenario:\\n            1. Create a new keypair, check if it was created successfully.\\n        "}	7	\N
123	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_images	success	0.76872992515563965	{"name": "Images list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of images is available.\\n        Target component: Glance\\n        Scenario:\\n            1. Request the list of images.\\n            2. Confirm that a response is received.\\n        "}	8	\N
124	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_instances	success	0.2396550178527832	{"name": "Instance list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of instances is available.\\n        Target component: Nova\\n        Scenario:\\n            1. Request the list of instances.\\n            2. Confirm that a response is received.\\n        "}	8	\N
125	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_rate_limits	success	0.2137749195098877	{"name": "Limits list availability", "traceback": null, "step": null, "duration": "2-20 s.", "message": null, "description": "        Test checks that the list of absolute limits is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of limits.\\n            2. Confirm that a response is received.\\n        "}	8	\N
126	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_snapshots	success	0.98895597457885742	{"name": "Snapshots list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of snapshots is available.\\n        Target component: Glance\\n\\n        Scenario:\\n            1. Request the list of snapshots.\\n            2. Confirm that a response is received.\\n        "}	8	\N
127	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_volumes	success	0.13521003723144531	{"name": "Volume list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of volumes is available.\\n        Target component: Cinder\\n\\n        Scenario:\\n            1. Request the list of volumes.\\n            2. Confirm that a response is received.\\n        "}	8	\N
114	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_002_create_security_groups	failure	0.059661149978637695	{"name": "Security group creation", "traceback": null, "step": "", "duration": "2-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a security group, check if it was created correctly.\\n        "}	7	\N
115	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_004_check_networks	failure	0.047997951507568359	{"name": "Check network parameters", "traceback": null, "step": "", "duration": "1-50 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Get the list of networks.\\n            2. Confirm that networks have expected labels.\\n            3. Confirm that networks have expected ids.\\n        "}	7	\N
116	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_005_create_servers	failure	0.10788083076477051	{"name": "Launch instance", "traceback": null, "step": "", "duration": "50-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n        "}	7	\N
118	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_007_check_public_network_connectivity	failure	0.065328121185302734	{"name": "Check that VM is accessible via floating IP address", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group\\n\\t\\t\\t(if it doesn`t exist yet).\\n            3. Create a new floating IP (if doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check connectivity to the floating IP using ping command.\\n        "}	7	\N
119	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_008_check_public_instance_connectivity_from_instance	failure	0.083369970321655273	{"name": "Check network connectivity from instance via floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n            (if it doesn`t exist yet).\\n            3. Create a new floating IP (if it doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check that public IP address 8.8.8.8 can be pinged from instance.\\n        "}	7	\N
120	fuel_health.tests.smoke.test_nova_image_actions.TestImageAction.test_snapshot	failure	0.06340789794921875	{"name": "Launch instance, create snapshot, launch instance from snapshot", "traceback": null, "step": "", "duration": "80-180 s.", "message": "There are no compute nodes", "description": "        Target component: Glance\\n\\n        Scenario:\\n            1. Launch an instance using the default image.\\n            2. Make snapshot of the created instance.\\n            3. Delete the instance created in step 1.\\n            4. Launch another instance from the snapshot created in step 2.\\n        "}	7	\N
121	fuel_health.tests.smoke.test_user_create.TestUserTenantRole.test_create_user	success	0.71582889556884766	{"name": "User creation and authentication in Horizon", "traceback": null, "step": null, "duration": "1-50 s.", "message": null, "description": "        Target components: Nova, Keystone\\n\\n        Scenario:\\n            1. Create a new tenant.\\n            2. Check that tenant was created successfully.\\n            3. Create a new user.\\n            4. Check that user was created successfully.\\n            5. Create a new user role.\\n            6. Check that user role was created successfully.\\n            7. Perform token authentication.\\n            8. Check that authentication was successful.\\n            9. Send authentication request to Horizon.\\n            10. Confirm that response status is 200.\\n        "}	7	\N
122	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_flavors	success	1.0346951484680176	{"name": "Flavor list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of flavors is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of flavors.\\n            2. Confirm that a response is received.\\n        "}	8	\N
128	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_services	success	0.92175698280334473	{"name": "Services list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that active services can be listed.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of services.\\n            2. Confirm that a response is received.\\n        "}	8	\N
117	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_006_assign_floating_ips	failure	0.079834938049316406	{"name": "Assign floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if doesn`t exist yet).\\n            2. Create instance using the new security group.\\n            3. Create a new floating IP.\\n            4. Assign the new floating IP to the instance.\\n        "}	7	\N
129	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_users	success	0.16862893104553223	{"name": "User list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that existing users can be listed.\\n        Target component: Keystone\\n\\n        Scenario:\\n            1. Request the list of users.\\n            2. Confirm that a response is received.\\n        "}	8	\N
131	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_services_state	success	8.6346428394317627	{"name": "Service status monitoring", "traceback": null, "step": null, "duration": "2-50 s.", "message": null, "description": "        Confirm that all required services are running.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a controller node via SSH.\\n            2. Execute nova-manage service list command.\\n            3. Confirm that there are no failed services (with state 'XXX')\\n        "}	8	\N
130	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_dns_state	failure	0.065583944320678711	{"name": "DNS availability", "traceback": null, "step": 1, "duration": "1-100 s.", "message": "There are no compute nodes.", "description": "        Test DNS resolution on compute nodes.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a compute node via SSH.\\n            2. Execute ping 8.8.8.8 from the compute.\\n            3. Check all the packets were received.\\n            4. Execute host 8.8.8.8 from the controller.\\n            5. Check 8.8.8.8 host is resolved.\\n        "}	8	\N
134	fuel_health.tests.smoke.test_create_volume.VolumesTest.test_volume_create	failure	0.10130405426025391	{"name": "Create instance volume", "traceback": null, "step": "", "duration": "48-200 s.", "message": "There are no cinder nodes", "description": "        Target component: Compute\\n\\n        Scenario:\\n            1. Create a new small-size volume.\\n            2. Wait for volume status to become \\"available\\".\\n            3. Check volume has correct name.\\n            4. Create new instance.\\n            5. Wait for \\"Active\\" status\\n            6. Attach volume to an instance.\\n            7. Check volume status is \\"in use\\".\\n            8. Get information on the created volume by its id.\\n            9. Detach volume from the instance.\\n            10. Check volume has \\"available\\" status.\\n            11. Delete volume.\\n        "}	9	\N
133	fuel_health.tests.smoke.test_create_flavor.FlavorsAdminTest.test_create_flavor	success	0.26547598838806152	{"name": "Create instance flavor", "traceback": null, "step": null, "duration": "1-30 s.", "message": null, "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create small-size flavor.\\n            2. Check that created flavor has the expected name.\\n            3. Check that the flavor disk has the expected size.\\n        "}	9	\N
132	fuel_health.tests.sanity.test_sanity_networking.NetworksTest.test_list_networks	success	0.43616509437561035	{"name": "Networks availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that available networks can be listed.\\n        Target component: Nova Networking.\\n\\n        Scenario:\\n            1. Request the list of networks.\\n            2. Confirm that a response is received.\\n        "}	8	\N
135	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_001_create_keypairs	failure	0.075592994689941406	{"name": "Keypair creation", "traceback": null, "step": "", "duration": "10-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova.\\n\\n        Scenario:\\n            1. Create a new keypair, check if it was created successfully.\\n        "}	9	\N
145	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_images	success	1.0048048496246338	{"name": "Images list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of images is available.\\n        Target component: Glance\\n        Scenario:\\n            1. Request the list of images.\\n            2. Confirm that a response is received.\\n        "}	10	\N
146	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_instances	success	0.4453279972076416	{"name": "Instance list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of instances is available.\\n        Target component: Nova\\n        Scenario:\\n            1. Request the list of instances.\\n            2. Confirm that a response is received.\\n        "}	10	\N
147	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_rate_limits	success	0.30778312683105469	{"name": "Limits list availability", "traceback": null, "step": null, "duration": "2-20 s.", "message": null, "description": "        Test checks that the list of absolute limits is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of limits.\\n            2. Confirm that a response is received.\\n        "}	10	\N
148	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_snapshots	success	0.83120989799499512	{"name": "Snapshots list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of snapshots is available.\\n        Target component: Glance\\n\\n        Scenario:\\n            1. Request the list of snapshots.\\n            2. Confirm that a response is received.\\n        "}	10	\N
149	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_volumes	success	0.1954801082611084	{"name": "Volume list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of volumes is available.\\n        Target component: Cinder\\n\\n        Scenario:\\n            1. Request the list of volumes.\\n            2. Confirm that a response is received.\\n        "}	10	\N
136	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_002_create_security_groups	failure	0.10320115089416504	{"name": "Security group creation", "traceback": null, "step": "", "duration": "2-25 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a security group, check if it was created correctly.\\n        "}	9	\N
137	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_004_check_networks	failure	0.10577297210693359	{"name": "Check network parameters", "traceback": null, "step": "", "duration": "1-50 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Get the list of networks.\\n            2. Confirm that networks have expected labels.\\n            3. Confirm that networks have expected ids.\\n        "}	9	\N
138	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_005_create_servers	failure	0.11865901947021484	{"name": "Launch instance", "traceback": null, "step": "", "duration": "50-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n        "}	9	\N
140	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_007_check_public_network_connectivity	failure	0.060168027877807617	{"name": "Check that VM is accessible via floating IP address", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group\\n\\t\\t\\t(if it doesn`t exist yet).\\n            3. Create a new floating IP (if doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check connectivity to the floating IP using ping command.\\n        "}	9	\N
141	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_008_check_public_instance_connectivity_from_instance	failure	0.13822507858276367	{"name": "Check network connectivity from instance via floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "\\n        Scenario:\\n            1. Create a new security group (if it doesn`t exist yet).\\n            2. Create an instance using the new security group.\\n            (if it doesn`t exist yet).\\n            3. Create a new floating IP (if it doesn`t exist yet).\\n            4. Assign the new floating IP to the instance.\\n            5. Check that public IP address 8.8.8.8 can be pinged from instance.\\n        "}	9	\N
142	fuel_health.tests.smoke.test_nova_image_actions.TestImageAction.test_snapshot	failure	0.077169895172119141	{"name": "Launch instance, create snapshot, launch instance from snapshot", "traceback": null, "step": "", "duration": "80-180 s.", "message": "There are no compute nodes", "description": "        Target component: Glance\\n\\n        Scenario:\\n            1. Launch an instance using the default image.\\n            2. Make snapshot of the created instance.\\n            3. Delete the instance created in step 1.\\n            4. Launch another instance from the snapshot created in step 2.\\n        "}	9	\N
143	fuel_health.tests.smoke.test_user_create.TestUserTenantRole.test_create_user	success	0.9619598388671875	{"name": "User creation and authentication in Horizon", "traceback": null, "step": null, "duration": "1-50 s.", "message": null, "description": "        Target components: Nova, Keystone\\n\\n        Scenario:\\n            1. Create a new tenant.\\n            2. Check that tenant was created successfully.\\n            3. Create a new user.\\n            4. Check that user was created successfully.\\n            5. Create a new user role.\\n            6. Check that user role was created successfully.\\n            7. Perform token authentication.\\n            8. Check that authentication was successful.\\n            9. Send authentication request to Horizon.\\n            10. Confirm that response status is 200.\\n        "}	9	\N
144	fuel_health.tests.sanity.test_sanity_compute.SanityComputeTest.test_list_flavors	success	1.0197157859802246	{"name": "Flavor list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that the list of flavors is available.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of flavors.\\n            2. Confirm that a response is received.\\n        "}	10	\N
153	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_services_state	success	13.355700969696045	{"name": "Service status monitoring", "traceback": null, "step": null, "duration": "2-50 s.", "message": null, "description": "        Confirm that all required services are running.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a controller node via SSH.\\n            2. Execute nova-manage service list command.\\n            3. Confirm that there are no failed services (with state 'XXX')\\n        "}	10	\N
150	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_services	success	0.86501693725585938	{"name": "Services list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that active services can be listed.\\n        Target component: Nova\\n\\n        Scenario:\\n            1. Request the list of services.\\n            2. Confirm that a response is received.\\n        "}	10	\N
151	fuel_health.tests.sanity.test_sanity_identity.ServicesTestJSON.test_list_users	success	0.21957492828369141	{"name": "User list availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that existing users can be listed.\\n        Target component: Keystone\\n\\n        Scenario:\\n            1. Request the list of users.\\n            2. Confirm that a response is received.\\n        "}	10	\N
154	fuel_health.tests.sanity.test_sanity_networking.NetworksTest.test_list_networks	success	0.6561429500579834	{"name": "Networks availability", "traceback": null, "step": null, "duration": "1-20 s.", "message": null, "description": "        Test checks that available networks can be listed.\\n        Target component: Nova Networking.\\n\\n        Scenario:\\n            1. Request the list of networks.\\n            2. Confirm that a response is received.\\n        "}	10	\N
152	fuel_health.tests.sanity.test_sanity_infrastructure.SanityInfrastructureTest.test_dns_state	failure	0.11318397521972656	{"name": "DNS availability", "traceback": null, "step": 1, "duration": "1-100 s.", "message": "There are no compute nodes.", "description": "        Test DNS resolution on compute nodes.\\n        Target component: OpenStack\\n\\n        Scenario:\\n            1. Connect to a compute node via SSH.\\n            2. Execute ping 8.8.8.8 from the compute.\\n            3. Check all the packets were received.\\n            4. Execute host 8.8.8.8 from the controller.\\n            5. Check 8.8.8.8 host is resolved.\\n        "}	10	\N
139	fuel_health.tests.smoke.test_nova_create_instance_with_connectivity.TestNovaNetwork.test_006_assign_floating_ips	failure	0.10296297073364258	{"name": "Assign floating IP", "traceback": null, "step": "", "duration": "40-200 s.", "message": "There are no compute nodes", "description": "        Target component: Nova\\n\\n        Scenario:\\n            1. Create a new security group (if doesn`t exist yet).\\n            2. Create instance using the new security group.\\n            3. Create a new floating IP.\\n            4. Assign the new floating IP to the instance.\\n        "}	9	\N
\.


--
-- Name: test_runs_pkey; Type: CONSTRAINT; Schema: public; Owner: ostf; Tablespace: 
--

ALTER TABLE ONLY test_runs
    ADD CONSTRAINT test_runs_pkey PRIMARY KEY (id);


--
-- Name: test_sets_pkey; Type: CONSTRAINT; Schema: public; Owner: ostf; Tablespace: 
--

ALTER TABLE ONLY test_sets
    ADD CONSTRAINT test_sets_pkey PRIMARY KEY (id);


--
-- Name: tests_pkey; Type: CONSTRAINT; Schema: public; Owner: ostf; Tablespace: 
--

ALTER TABLE ONLY tests
    ADD CONSTRAINT tests_pkey PRIMARY KEY (id);


--
-- Name: tests_test_run_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ostf
--

ALTER TABLE ONLY tests
    ADD CONSTRAINT tests_test_run_id_fkey FOREIGN KEY (test_run_id) REFERENCES test_runs(id);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

